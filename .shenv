#!/bin/sh
# shellcheck disable=SC2086
#
# Note this file uses a few commands like `tr` and `dircolors.hex` on our PATH
# to create environment variables. If sourced from a shell with an empty PATH,
# it'll fail. Thankfully, shells are smart and shouldn't let you do this. The
# following starts a shell with an empty environment. It's supposed to mimic our
# login shell and the `promote` function in ~/.shrc too.
#
# ```
# env - sh -c 'env; echo $PATH'
# ```
#
# The only env var output will be PWD. However, the PATH printed in this case
# will be the common **/sbin and **/bin directories. With this, we'll be able to
# re-export the path with `tr`, and any other dependent binaries like in ~/bin
# or $GOBIN will be found. Having said that, there is one env var we do always
# need though:
#
# ```
# env - "HOME=$HOME" sh -c '. $HOME/.shenv; env' | sort
# ```
#
# HOME is not implicit and has to be passed. See the `promote` function.

# On Windows 10
if [ -n "${WSL_DISTRO_NAME:-}" ]; then
    export DOCKER_HOST=tcp://localhost:2375
fi

export TMP="${TMP:-/tmp}"
export TMPDIR="${TMPDIR:-$TMP}"
export VISUAL=nvim
export EDITOR="$VISUAL"

export GOPATH="$HOME/local/share/go"
export GOBIN="$HOME/local/share/go/bin"
export PYENV_ROOT="$HOME/local/opt/pyenv"

# For anything we run that was installed from source (e.g. tmux), the runtime
# linker needs to know where to find the shared libraries via LD_LIBRARY_PATH.
# CPATH and LIBRARY_PATH help during Autoconf configure scripts, similar to
# CFLAGS and LDFLAGS. Also see https://unix.stackexchange.com/a/149361/152529
# for more info.
export CPATH="$HOME/local/include:$CPATH"
export LIBRARY_PATH="$HOME/local/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$HOME/local/lib:$LD_LIBRARY_PATH"
export MANPATH="$HOME/local/share/man:$MANPATH"

paths="
    $HOME/bin
    $HOME/local/bin
    $GOBIN
    /usr/local/sbin
    /usr/local/bin
    /usr/sbin
    /usr/bin
    /sbin
    /bin
    /mnt/c/Windows/System32/WindowsPowerShell/v1.0
    /mnt/c/Windows/System32
    /mnt/c/Windows
"
PATH="$(echo $paths | tr ' ' ':')"
export PATH

#

# As this file will be sourced, we can find our shell via $0.
export SHELL="$0"
eval "$(dircolors.hex "$HOME/.dir_colors")"

#

# bash-specific to pretty history
export HISTFILE="$HOME/.bash_history"
export HISTTIMEFORMAT="%F %T "
export HISTCONTROL=ignoredups:ignorespace
