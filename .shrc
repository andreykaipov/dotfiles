#!/bin/bash
# shellcheck shell=sh source=/dev/null
#
# What should and should not go into this file? Well, since our local tmux
# session inherits the environment from the login shell that spawned it, any
# environment variables are available from within child tmux windows/panes too,
# so we don't need to source ~/.shenv here too. However, aliases and functions
# are not exportable, so we must source ~/.shalias and ~/.shfunction here. This
# is rather quick as functions and aliases defined via single quotes are lazily
# evaluated.
#
# But wait -- what happens if I want to update the environment during my tmux
# session? Shouldn't we also source ~/.shenv? No, because once everything is set
# up, the environment doesn't change often nor dynamically enough, so it doesn't
# merit exporting them as often as we create new tmux panes. However, when they
# they do change, it'd be very cumbersome relying on tmux inheriting the login
# shell's environment as it means us having to restart tmux and "logging in" all
# over again.
#
# Fortunately, there's a way around this! We can update tmux's global
# environment from within tmux itself. The `promote` function below does so.
# See https://stackoverflow.com/a/61882412/4085283 for more information.
#
# The workflow for updating environmental variables is to edit ~/.shenv as
# usual, and then run `promote ~/.shenv` instead of `. ~/.shenv` from the
# current shell. Any new tmux windows/panes will have our updated environment!
# This will also update the existing environment too, acting as a drop-in
# replacement for the `source` built-in.
#
# If we want to get really sophisticated in the future, we can set up a watch on
# ~/.shenv via inotify to run this function on changes to avoid doing so
# manually! But I'm not too crazy yet!
#
# By sourcing our file from a limited subshell, we avoid promoting any
# unnecessary env vars to the global tmux environment (e.g. we may have exported
# a one-time build env var that new shells don't need). Once we have every
# variable exported by the sourced file, we use indirect variable references to
# update our environment. The escaped quotes are necessary because of word
# splitting as values can potentially have leading/trailing spaces.
#
# Known limitations involve completely removing variables from our sourced file.
# We'd have to remove any of those from the global tmux environment ourselves.
promote() {
    sourced="$1"; shift
    . "$sourced"
    env - \
        "HOME=$HOME" \
        | sh -c ". $sourced; env" | cut -d= -f1 | while read -r var; do
            val="$(eval "echo \"\$$var\"")"
            tmux set-environment -gt local "$var" "$val"
        done
}

. ~/.shalias
. ~/.shfunction
. ~/.shooks
. ~/local/share/bash-completion/bash_completion

: "${_reset?}" "${_brightred?}" "${_brightgreen?}" "${__ret_last_cmd:=0}"

# Fallback for anything but Bash. We use printf to print colors as not every
# shell supports colors directly in its PS1, e.g. ash or dash or any minimal
# shell. Why would we ever use ash or dash? Mind your own business.
if [ -z "$BASH_VERSION" ]; then
    # shellcheck disable=SC2016
    fnretcolor='if [ "$?" = 0 ]; then printf "${_brightgreen}"; else printf "${_brightred}"; fi'
    PS1='$(printf "$(eval "$fnretcolor")%s$_reset$ " "$0")'
    printf "\e]2;%s\e\\" "#[fg=yellow,bold]$PWD#[fg=default] $(git condensed-status-tmux)"
    return
fi

__prompt_command() {
    echo
    #path="\[${_brightyellow}\]\w\[${_reset}\]"
    #gitinfo="$(git condensed-status)"
    #PS1="\n$path $gitinfo\n "

    #mux set -g status-left "#S #P $PWD"
    #tmux set #{W:#{E:window-status-format} ,#{E:window-status-current-format} }
    #{W:#{E:window-status-format} ,#{E:window-status-current-format} }
    #~
    #tmux set -g window-status-current-format "
    #tmux rename-window "$PWD $(git condensed-status-tmux)"
}


precmd() {
    # lastcmd="$(HISTTIMEFORMAT='' history | awk '{$1=""; print substr($0,2)}' | tail -1)"
    # echo "in precmd: last command was $lastcmd"
    printf ""
}

postcmd() {
    [ "$__ret_last_cmd" = 0 ] && pcolor="${_brightgreen}" || pcolor="${_brightred}"
    setprompt "$pcolor"
    echo
}

# Surround non-printing chars with \[...\] or \1...\2 in Bash's PS1 or
# readline's mode strings respectively. Otherwise, our prompt will display
# incorrectly during navigation with C-[AEUR], for example.
#
# For terminals supporting DECSCUSR sequences, we change our cursor between
# readline modes. See https://invisible-island.net/xterm/ctlseqs/ctlseqs.html.
setprompt() {
    promptcolor="$1"; shift
    bind "set emacs-mode-string  \1\e[5 q\2\1$promptcolor\2❯'\1$_reset\2"
    bind "set vi-ins-mode-string \1\e[5 q\2\1$promptcolor\2❯\1$_reset\2"
    bind "set vi-cmd-mode-string \1\e[6 q\2\1$promptcolor\2:\1$_reset\2"
    PS1=" "
    #
    # Set window and pane title. See
    # http://man7.org/linux/man-pages/man1/tmux.1.html#NAMES_AND_TITLES.
    # printf "\ek%s\e\\" "#[fg=yellow]$PWD#[fg=default]"
    printf "\e]2;%s\e\\" "#[fg=yellow,bold]${PWD/$HOME/'~'}#[fg=default] $(git condensed-status-tmux)"
}

main() {
    shopt -s autocd
    setprompt "${_brightgreen}"
}

main
