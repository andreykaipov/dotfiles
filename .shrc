#!/bin/sh
# shellcheck source=/dev/null disable=SC2025

export DOCKER_HOST=tcp://localhost:2375
export PATH="$HOME/bin:$PATH"

export GOBIN="$HOME/bin"
export GOPATH="$HOME/go"

sourcef() { [ -r "$1" ] && . "$1"; }
sourcef ~/.git-prompt.sh
sourcef ~/.aliases
sourcef ~/.shls

# why not export these too :)
export _red='\[\e[31m\]'
export _green='\[\e[32m\]'
export _yellow='\[\e[33m\]'
export _blue='\[\e[34m\]'
export _purple='\[\e[35m\]'
export _cyan='\[\e[36m\]'

export _brightred='\[\e[1;31m\]'
export _brightgreen='\[\e[1;32m\]'
export _brightyellow='\[\e[1;33m\]'
export _brightblue='\[\e[1;34m\]'
export _brightpurple='\[\e[1;35m\]'
export _brightcyan='\[\e[1;36m\]'

export _lightred='\[\e[91m\]'
export _lightgreen='\[\e[92m\]'
export _lightyellow='\[\e[93m\]'
export _lightblue='\[\e[94m\]'
export _lightpurple='\[\e[95m\]'
export _lightcyan='\[\e[96m\]'

export _reset='\[\e[0m\]'

# only set a PS1 if it's bash's default
defaultbashps1='\\s-\\v\\\$'
if echo "$PS1" | grep -Eq "$defaultbashps1"; then
    # ┌[hh:mm:ss] [path/to/whatever] [n files, m bytes]
    # └▶ vi ~/.bash_profile
    PS1="\n┌[\$(if [ \$? = 0 ]; then echo '$_green\D{%T}$_reset'; else echo '$_red\D{%T}$_reset'; fi)] [$_brightyellow\w$_reset] \$(__git_ps1 '[$_brightpurple%s\e[0m] ')[$_blue\$(ls | wc -l) files, \$(ls -al | head -n1 | sed 's/total //')$_reset]\n└▶ "
fi

#PS1="
#\$(ssh_info)%{\$fg_bold[yellow]%}%~%u%{\$reset_color%} %{\$fg_bold[cyan]%}\$(__git_ps1 '%s')
#%(?.%{\$fg[green]%}.%{\$fg[red]%})%(!.#.❯)%{\$reset_color%} "

#PS1="\n┌[\$(if [ \$? = 0 ]; then echo '$green\D{%T}$reset'; else echo '$red\D{%T}$reset'; fi)] [$boldyellow\w$reset] \$(__git_ps1 '[$boldpurple%s\e[0m] ')[$blue\$(ls | wc -l) files, \$(ls -al | head -n1 | sed 's/total //')$reset]\n└▶ "
#export PS1="\n┌[\$(if [ \$? = 0 ]; then echo '$green\D{%T}$reset'; else echo '$red\D{%T}$reset'; fi)] [$yellow\w$reset] \$(__git_ps1 '[$purple%s\e[0m] ')[$blue\$(ls | wc -l) files, \$(ls -al | head -n1 | sed 's/total //')$reset]\n└▶ "

tfvars2json() {
    f="$1"
    neat="$(
        < "$f" awk '
            BEGIN { print "{" }
            $0    { if ( match($0, /[^,={]$/) ) { print $0"," } else { print $0 } }
            END   { print "}" }
        ' | tr -d '\n'
    )"
    t="$(mktemp -d)"
    cd "$t" || return
    printf "jsonencode(%s)" "$neat" | terraform console | jq .
    cd - >/dev/null || return
    rm -rf "$t"
}

# easily browse s3 buckets
# requires fzf
vims3() {
    tmpfile=$(mktemp)
    bucket=$(aws "$@" s3 ls | awk '{ print $3 }' | fzf)
    [ -z "$bucket" ] && exit 0
    selected=$(aws "$@" s3 ls --recursive "s3://$bucket/" | awk '{ print $4 }' | fzf)
    [ -z "$selected" ] && exit 0
    s3key="s3://$bucket/$selected"
    aws "$@" s3 cp "$s3key" "$tmpfile"
    rc=$?
    if [ $rc != 0 ]; then
        echo >&2 "Bucket or file does not exist"
        exit 1
    else
        VIMS3_HASH="$(openssl dgst -sha256 "$tmpfile")"; export VIMS3_HASH
        vim "$tmpfile"
        if [ "$(openssl dgst -sha256 "$tmpfile")" != "$VIMS3_HASH" ];then
            aws "$@" s3 cp "$tmpfile" "$s3key"
        fi
    fi
    rm -f "$tmpfile"
    unset VIMS3_HASH
}

# opens up an incognito window from our aws session token
aws_login() {
  if [ -z "${AWS_SESSION_TOKEN}" ]; then
    echo "no AWS session token found"
  fi

  jq -cn --arg session_id "${AWS_ACCESS_KEY_ID}" \
         --arg session_key "${AWS_SECRET_ACCESS_KEY}" \
         --arg session_token "${AWS_SESSION_TOKEN}" \
         '{"sessionId": $session_id, "sessionKey": $session_key, "sessionToken": $session_token}' \
    | curl -s -G \
           --data "Action=getSigninToken" \
           --data "SessionDuration=43200" \
           --data-urlencode "Session@-" \
           https://signin.aws.amazon.com/federation \
    | jq -r '"https://signin.aws.amazon.com/federation?Action=login&Destination=https://console.aws.amazon.com/&SigninToken=\(.SigninToken)"' \
    | xargs open -na "Google Chrome" --args --incognito
}

todo() {
    touch ~/.todo
    case "$1" in
        ""|l|list)
            cat ~/.todo
            ;;
        p|progress|w|work)
            shift
            index="$1"; shift
            awk -v "i=$index" '$2==i"." {$1="░"} 1' ~/.todo > ~/.todo.tmp
            mv ~/.todo.tmp ~/.todo
            ;;
        d|"done")
            shift
            index="$1"; shift
            awk -v "i=$index" '$2==i"." {$1="✔"} 1' ~/.todo > ~/.todo.tmp
            mv ~/.todo.tmp ~/.todo
            ;;
        rm)
            shift
            index="$1"; shift
            awk -v "i=$index" '$2!=i"."' ~/.todo > ~/.todo.tmp
            mv ~/.todo.tmp ~/.todo
            ;;
        *)
            last="$(tail -n1 ~/.todo | grep -oE '[0-9]+' | head -n1)"
            succ="$((last+1))"
            echo "⚬ $succ. $*" >> ~/.todo
            ;;
    esac
}

reset_gp_vpn() {
    echo "Stopping GlobalProtect..."
    launchctl unload /Library/LaunchAgents/com.paloaltonetworks.gp.pangpa.plist
    launchctl unload /Library/LaunchAgents/com.paloaltonetworks.gp.pangps.plist
    echo "Starting GlobalProtect..."
    launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangpa.plist
    launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangps.plist
    echo "Done!"
}

weather() {
    # change Paris to your default location
    location="${1:-}"
    if [ "$(tput cols)" -lt 125 ]; then
        params='n'
    fi
    curl -s "wttr.in/$location?$params" | head -n-2
}
