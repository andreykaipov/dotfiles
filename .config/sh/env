#!/bin/sh
# shellcheck disable=SC2086
#
# Note this file uses a few commands like `tr` and `dircolors.hex` on our PATH
# to create environment variables, specifically the PATH var too. At first
# glance, this might be an issue from shells with an empty PATH. Thankfully,
# shells are smart and don't let you do this (unless you export PATH='' of
# course). For example, the following starts a shell with an empty environment,
# and prints out the environment:
#
# ```
# $ env - sh -c 'env; echo $PATH'
# PWD=/Users/andreyk
# SHLVL=1
# _=/usr/bin/env
# /usr/gnu/bin:/usr/local/bin:/bin:/usr/bin:.
# ```
#
# This "empty" shell mimics our login shell and the `sourceg` function in
# ~/.shrc too. Note how among the environment variables printed, PATH is not
# among them. However, it still has a value. Nice. The above example is from
# a macOS 1.15+ machine. With this, we're able to use common tools to generate
# our other env vars. And once we generate our PATH, we can use it further in
# the script (for things outside of system paths, like ~/bin/dircolors.hex)!
#
# To test out all the env vars available from this file, run it from an empty
# shell and source it:
#
# ```
# env - "HOME=$HOME" sh -c '. $HOME/.shenv; env' | sort
# ```
#
# Note HOME is not implicit and has to be passed. See the `sourceg` function.
#
# Further, as this file contains subshell logic to form env vars, it's not
# recommended to source this file from every child shell. As it's only for env
# vars, it's enough to just let tmux inherit the login shell's environment, and
# expose that to each tmux pane. If changes to this file are necessary, and
# restarting tmux is a bitch because you've got 10 windows open, then that's
# what the `sourceg` function in ~/.shrc is for. However, at best, you're saving
# like 30ms each time you source this directly, so ehh who cares.

########

# We start with Nix stuff and then our PATH

. ~/.config/sh/functions # for pathify

# Taken from the ~/.nix-profile/etc/profile.d/nix.sh script
NIX_PROFILES="$(echo "
    /nix/var/nix/profiles/default
    $HOME/.nix-profile
" | pathify ' ')"; export NIX_PROFILES
export NIX_SSL_CERT_FILE="$HOME/.nix-profile/etc/ssl/certs/ca-bundle.crt"
export NIX_PATH="$HOME/.nix-defexpr/channels"

PATH="$(echo "
    $(for profile in $NIX_PROFILES; do echo "$profile/bin"; done)

    $HOME/bin
    /usr/local/sbin
    /usr/local/bin
    /usr/sbin
    /usr/bin
    /sbin
    /bin

    #$HOME/local/bin
    #$GOBIN
    #$PYENV_ROOT/shims

    #/mnt/c/Windows/System32/WindowsPowerShell/v1.0
    #/mnt/c/Windows/System32
    #/mnt/c/Windows
" | pathify)"; export PATH

# For macOS 1.15+; is that what being a stubborn old dude feels like?
export BASH_SILENCE_DEPRECATION_WARNING=1;

# "wow he must be a really cool dude"
export VISUAL=nvim
export EDITOR="$VISUAL"

# Find our shell via $0 for dircolors. This var might be overriden by something
# else (I guess login(1) or AD on macOS), unless we run chsh.
SHELL="$(command -v bash)"; export SHELL
eval "$(dircolors.hex "$HOME/.config/dircolors/dircolors")"

# Bash-specific stuff for pretty history
export HISTFILE="$HOME/.bash_history"
export HISTTIMEFORMAT="%F %T "
export HISTCONTROL=ignoredups:ignorespace

# Miscellaneous
export INPUTRC="$HOME/.config/readline/inputrc"
export PAGER="less -R"
export TMP="${TMP:-/tmp}"
export TMPDIR="${TMPDIR:-$TMP}"

# On Windows 10... if this new Nix shit even works on WSL
if [ -n "${WSL_DISTRO_NAME:-}" ]; then
    export DOCKER_HOST=tcp://localhost:2375
fi
