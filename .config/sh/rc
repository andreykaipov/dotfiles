#!/bin/bash
# shellcheck shell=sh
#
# What should and should not go into this file? Well, since our local tmux
# session inherits the environment from the login shell that spawned it, any
# environment variables are available from within child tmux windows/panes too,
# so we don't need to source ~/.shenv here too. However, aliases and functions
# are not exportable, so we must source ~/.shalias and ~/.shfunction here. This
# is rather quick as functions and aliases defined via single quotes are lazily
# evaluated.
#
# But wait -- what happens if I want to update the environment during my tmux
# session? Shouldn't we also source ~/.shenv for that use-case? No, because once
# everything is set up, the environment doesn't change often nor dynamically
# enough, so it doesn't merit exporting them as often as we create new tmux
# panes. However, when they they do change, it'd be very cumbersome relying only
# on tmux inheriting the login shell's environment as it means us having to
# restart tmux with our many open windows and "logging in" all over again.
#
# Fortunately, there's a way around this! We can update tmux's global
# environment from within tmux itself. The `sourceg` function below does so. See
# https://stackoverflow.com/a/61882412/4085283 for more information.
#
# The workflow for updating environmental variables is to edit ~/.shenv as
# usual, and then run `sourceg ~/.shenv` instead of `. ~/.shenv` from the
# current shell. Any new tmux windows/panes will have our updated environment!
# This will also update the existing environment too, acting as a drop-in
# replacement for the `source` built-in.
#
# If we want to get really sophisticated in the future, we can set up a watch on
# ~/.shenv via inotify to run this function on changes to avoid doing so
# manually! But I'm not too crazy yet!
#
# By sourcing our file from a limited subshell, we avoid promoting any
# unnecessary env vars to the global tmux environment (e.g. we may have exported
# a one-time build env var that new shells don't need). Once we have every
# variable exported by the sourced file, we use indirect variable references to
# update our environment. The escaped quotes are necessary because of word
# splitting as values can potentially have leading/trailing spaces.
sourceg() {
    sourced="$1"; shift
    . "$sourced"
    env - \
        "HOME=$HOME" \
        sh -c ". $sourced; env" | cut -d= -f1 | while read -r var; do
            val="$(eval "echo \"\$$var\"")"
            tmux set-environment -gt local "$var" "$val"
        done
}

# unsetg is to unset as sourceg is to source, removing any set env vars from
# both the local and global tmux state.
unsetg() {
    var="${1?need a var to unset}"; shift
    unset "$var"
    tmux set-environment -gt local -u "$var"
}

. ~/.config/sh/aliases
. ~/.config/sh/functions
. ~/.config/sh/hooks # TODO: consider precmds with PS0 instead of trap .. DEBUG

# Fallback for anything but Bash. We use printf to print colors as not every
# shell supports colors directly in its PS1, e.g. ash or dash or any minimal
# shell. Why would we ever use ash or dash? Mind your own business.
if [ -z "$BASH_VERSION" ]; then
    # shellcheck disable=SC2016
    fnretcolor='if [ "$?" = 0 ]; then printf "\e[1;32m"; else printf "\e[1;31m"; fi'
    PS1='$(printf "$(eval "$fnretcolor")%s\[\e[0m\]$ " "$0")'
    printf "\e]2;%s\e\\" "#[fg=yellow,bold]$PWD#[fg=default] $(git condensed-status-tmux)"
    return
fi

# Anything below is Bash specific

. ~/.config/nix/links/bash-completion/etc/profile.d/bash_completion.sh

precmd() { :; }
postcmd() {
    [ "${__ret_last_cmd???}" = 0 ] && color="#[fg=green,bold]" || color="#[fg=red,bold]"
    retcolor() { printf "$color%s#[default]" "$1"; }

    # paneindex="$(tmux display -pt "${TMUX_PANE:?}" '#{pane_index}')"

    smiley="$(
        if [ "${__ret_last_cmd???}" = 0 ]; then
            retcolor 'c;'
        else
            retcolor ');'
        fi
    )"
    path="#[fg=yellow,bold]${PWD/$HOME/'~'}#[default]"
    git="$(git condensed-status-tmux)"

    printf "\e]2;%s\e\\" "$smiley $path $git"
}

# Note: Don't forget to surround non-printing chars with \[...\] (Bash's PS1) or
# \1...\2 (readline). Otherwise, our prompt will display incorrectly during
# navigation with C-[AEUR], for example.
#
# For terminals supporting DECSCUSR sequences, we change our cursor between
# readline modes. See https://invisible-island.net/xterm/ctlseqs/ctlseqs.html.
setprompt() {
    PS1=' '

    bind "set emacs-mode-string  \1\e[5 q\2\1\e[1;33m\2@\1\e[0m\2"
    bind "set vi-ins-mode-string \1\e[5 q\2\1\e[1;33m\2‚ùØ\1\e[0m\2"
    bind "set vi-cmd-mode-string \1\e[6 q\2\1\e[1;33m\2:\1\e[0m\2"

    # Set tmux window and pane title. See
    # http://man7.org/linux/man-pages/man1/tmux.1.html#NAMES_AND_TITLES.
    # printf "\ek%s\e\\" "#[fg=yellow]$PWD#[fg=default]"
    printf "\e]2;%s\e\\" "#[fg=yellow,bold]${PWD/$HOME/'~'}#[fg=default] $(git condensed-status-tmux)"

    # readline_keymap="$(bind -v | awk '$2 == "keymap" {print $3}')"
}

main() {
    shopt -s autocd
    setprompt
}

main
